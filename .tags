!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADAvgFileName	MPC/ADS/ADS.c	/^static char ADAvgFileName[] = "c:00000000.pwr";$/;"	v	file:
ADCounter	MPC/ADS/ADS.c	/^int ADCounter = 0;$/;"	v
ADS	MPC/ADS/ADS.c	/^PowerParameters ADS;$/;"	v
ADSFileHandle	MPC/ADS/ADS.c	/^int ADSFileHandle;$/;"	v
ADSFileName	MPC/ADS/ADS.c	/^void ADSFileName(long counter) {$/;"	f
ADSOn	MPC/ADS/ADS.c	/^bool ADSOn;$/;"	v
ADSStartTime	MPC/MPC_SETTINGS/Settings.c	/^ulong ADSStartTime;$/;"	v
ADSTIME	MPC/ADS/ADS.c	/^ushort ADSTIME = 0;$/;"	v
ADS_Status	MPC/ADS/ADS.c	/^bool ADS_Status() { return ADSOn; }$/;"	f
ADSample	MPC/ADS/ADS.c	/^short *ADSample;$/;"	v
ADSamplingRuptHandler	MPC/ADS/ADS.c	/^IEV_C_PROTO(ADSamplingRuptHandler);$/;"	v
ADTimingRuptHandler	MPC/ADS/ADS.c	/^IEV_C_PROTO(ADTimingRuptHandler);$/;"	v
AD_Check	MPC/ADS/ADS.c	/^bool AD_Check() {$/;"	f
AD_Log	MPC/ADS/ADS.c	/^void AD_Log(void) {$/;"	f
AD_Write	MPC/ADS/ADS.c	/^void AD_Write(ushort *AveragedEnergy) {$/;"	f
AMDMSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings AMDMSettings[] = {AMODEMMAXUPLOAD_NAME,$/;"	v
AMODEMBAUD	MPC/WINCH/Winch.h	20;"	d
AMODEMBLOCKSIZE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	205;"	d
AMODEMBLOCKSIZE_DESC	MPC/MPC_SETTINGS/Settings.h	206;"	d
AMODEMBLOCKSIZE_NAME	MPC/MPC_SETTINGS/Settings.h	204;"	d
AMODEMMAXUPLOAD_DEFAULT	MPC/MPC_SETTINGS/Settings.h	200;"	d
AMODEMMAXUPLOAD_DESC	MPC/MPC_SETTINGS/Settings.h	201;"	d
AMODEMMAXUPLOAD_NAME	MPC/MPC_SETTINGS/Settings.h	199;"	d
AMODEMOFFSET_DEFAULT	MPC/MPC_SETTINGS/Settings.h	195;"	d
AMODEMOFFSET_DESC	MPC/MPC_SETTINGS/Settings.h	196;"	d
AMODEMOFFSET_NAME	MPC/MPC_SETTINGS/Settings.h	194;"	d
AMODEMPWR	LARA/PLATFORM.h	22;"	d
AMODEMRX	LARA/PLATFORM.h	32;"	d
AMODEMTX	LARA/PLATFORM.h	33;"	d
AModemCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable AModemCmdTable[] =$/;"	v
AModem_Data	MPC/WINCH/Winch.c	/^void AModem_Data(void) {$/;"	f
ANTLEN	MPC/WINCH/Winch.h	/^  short ANTLEN; \/\/ Length from CTD to antenna. More specifically: From CTD Depth$/;"	m	struct:__anon6
ANTMODPWR	LARA/PLATFORM.h	23;"	d
ANTSW	MPC/GPSIRID/GPSIRID.h	/^  short ANTSW;    \/\/=1: antenna switch; =0: no antenna switch$/;"	m	struct:__anon4
ANTSWPIN	MPC/GPSIRID/GPSIRID.c	54;"	d	file:
ANTSW_DEFAULT	MPC/MPC_SETTINGS/Settings.h	113;"	d
ANTSW_DESC	MPC/MPC_SETTINGS/Settings.h	114;"	d
ANTSW_NAME	MPC/MPC_SETTINGS/Settings.h	112;"	d
ASCENTCALLS	MPC/WINCH/Winch.h	/^  short ASCENTCALLS;$/;"	m	struct:__anon7
ASCENTRCV	MPC/WINCH/Winch.h	/^  short ASCENTRCV;$/;"	m	struct:__anon7
ASCENTTIME	LARA/PLATFORM.h	/^  short ASCENTTIME;$/;"	m	struct:__anon1
AVGVEL	LARA/PLATFORM.h	/^  float AVGVEL;$/;"	m	struct:__anon1
AllDirsCmd	MPC/MPC_SETTINGS/Settings.c	/^char *AllDirsCmd(CmdInfoPtr) {$/;"	f
AntMode	MPC/GPSIRID/GPSIRID.c	/^int AntMode(char r) {$/;"	f
AppendDetections	MPC/WISPR/WISPR.c	/^void AppendDetections(char *DTXString, int FileDescriptor) {$/;"	f
Append_Files	MPC/MPC_Global/MPC.c	/^bool Append_Files(int Dest, const char *SourceFileName, bool erase,$/;"	f
BATCAP	MPC/ADS/ADS.h	/^  char BATCAP[9];$/;"	m	struct:__anon2
BATLOG	MPC/ADS/ADS.h	/^  short BATLOG;    \/\/ t logging change in battery capacity$/;"	m	struct:__anon2
BATTERYCAPACITY_DEFAULT	MPC/MPC_SETTINGS/Settings.h	83;"	d
BATTERYCAPACITY_DESC	MPC/MPC_SETTINGS/Settings.h	84;"	d
BATTERYCAPACITY_NAME	MPC/MPC_SETTINGS/Settings.h	81;"	d
BATTERYLOG	LARA/PLATFORM.h	173;"	d
BATTERYLOGGER_DEFAULT	MPC/MPC_SETTINGS/Settings.h	77;"	d
BATTERYLOGGER_DESC	MPC/MPC_SETTINGS/Settings.h	78;"	d
BATTERYLOGGER_NAME	MPC/MPC_SETTINGS/Settings.h	76;"	d
BAUD	MPC/WISPR/WISPR.h	43;"	d
BITSHIFT	LARA/PLATFORM.h	182;"	d
BLUETOOTH_DEFAULT	MPC/MPC_SETTINGS/Settings.h	190;"	d
BLUETOOTH_DESC	MPC/MPC_SETTINGS/Settings.h	191;"	d
BLUETOOTH_NAME	MPC/MPC_SETTINGS/Settings.h	189;"	d
BTSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings BTSettings[] = {$/;"	v
BUOYBAUD	LARA/PLATFORM.h	36;"	d
BUOYMODE	LARA/PLATFORM.h	/^  short BUOYMODE;  \/\/ 0=stopped 1=ascend 2=descend 3=careful ascent$/;"	m	struct:__anon1
BUOYRCV	MPC/WINCH/Winch.h	/^  short BUOYRCV;$/;"	m	struct:__anon7
BitShift	MPC/ADS/ADS.c	/^ushort BitShift;$/;"	v
BlkLength	MPC/GPSIRID/GPSIRID.c	/^int BlkLength = RUDICSBLOCK; $/;"	v
Buoy_Status	MPC/WINCH/Winch.c	/^void Buoy_Status(void) {$/;"	f
CALLHOUR	MPC/GPSIRID/GPSIRID.h	/^  short CALLHOUR; \/\/ Hour at which to call$/;"	m	struct:__anon4
CALLHOUR_DEFAULT	MPC/MPC_SETTINGS/Settings.h	130;"	d
CALLHOUR_DESC	MPC/MPC_SETTINGS/Settings.h	131;"	d
CALLHOUR_NAME	MPC/MPC_SETTINGS/Settings.h	129;"	d
CALLMODE	MPC/GPSIRID/GPSIRID.h	/^  short CALLMODE; \/\/ 0==call on Dataxinterval, 1== call at set hour everyday.$/;"	m	struct:__anon4
CALLMODE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	134;"	d
CALLMODE_DESC	MPC/MPC_SETTINGS/Settings.h	135;"	d
CALLMODE_NAME	MPC/MPC_SETTINGS/Settings.h	133;"	d
CFXNum	MPC/MPC_SETTINGS/Settings.c	/^char CFXNum[6];               \/\/ 5 digits + terminating zero$/;"	v
CLK	LARA/PLATFORM.h	163;"	d
CLK	LARA/PLATFORM.h	165;"	d
CONSOLEINPUT	LARA/PLATFORM.h	94;"	d
CTD	MPC/CTD/CTD.c	/^CTDParameters CTD;$/;"	v
CTDCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable CTDCmdTable[] =$/;"	v
CTDLogFile	MPC/CTD/CTD.c	/^char CTDLogFile[] = "c:00000000.ctd";$/;"	v
CTDParameters	MPC/CTD/CTD.h	/^} CTDParameters;$/;"	t	typeref:struct:__anon3
CTDSAMPLES	LARA/PLATFORM.h	/^  short CTDSAMPLES;$/;"	m	struct:__anon1
CTDSENSOR	LARA/PLATFORM.h	89;"	d
CTDSamples	MPC/CTD/CTD.c	/^short CTDSamples;$/;"	v
CTDSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings CTDSettings[] = {$/;"	v
CTDSleep	LARA/LARA.c	/^void CTDSleep(void) {$/;"	f
CTDUPLOADFILE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	245;"	d
CTDUPLOADFILE_DESC	MPC/MPC_SETTINGS/Settings.h	246;"	d
CTDUPLOADFILE_NAME	MPC/MPC_SETTINGS/Settings.h	244;"	d
CTD_AverageDepth	MPC/CTD/CTD.c	/^float CTD_AverageDepth(int i, float *velocity) {$/;"	f
CTD_CalculateVelocity	MPC/CTD/CTD.c	/^float CTD_CalculateVelocity() {$/;"	f
CTD_CreateFile	MPC/CTD/CTD.c	/^void CTD_CreateFile(long filenum) {$/;"	f
CTD_Data	MPC/CTD/CTD.c	/^bool CTD_Data() {$/;"	f
CTD_DateTime	MPC/CTD/CTD.c	/^void CTD_DateTime() {$/;"	f
CTD_GetPrompt	MPC/CTD/CTD.c	/^bool CTD_GetPrompt() {$/;"	f
CTD_GetSettings	MPC/CTD/CTD.c	/^void CTD_GetSettings() {$/;"	f
CTD_Init	MPC/CTD/CTD.c	/^int CTD_Init() {$/;"	f
CTD_Sample	MPC/CTD/CTD.c	/^void CTD_Sample() {$/;"	f
CTD_SampleBreak	MPC/CTD/CTD.c	/^void CTD_SampleBreak() {$/;"	f
CTD_Select	MPC/CTD/CTD.c	/^void CTD_Select(int sbe) {$/;"	f
CTD_Start_Up	MPC/CTD/CTD.c	/^bool CTD_Start_Up(int sbe, bool settime) {$/;"	f
CTD_SyncMode	MPC/CTD/CTD.c	/^void CTD_SyncMode() {$/;"	f
CTD_VertVel	MPC/CTD/CTD.c	/^time_t CTD_VertVel(time_t seconds) {$/;"	f
CURRENT	MPC/ADS/ADS.c	/^long CURRENT; \/\/ Summation of channel 0 from QSPI...$/;"	v
CUSTOM_SYPCR	LARA/LARA.c	97;"	d	file:
Calc_Crc	MPC/GPSIRID/GPSIRID.c	/^int Calc_Crc(uchar *buf, int cnt) {$/;"	f
CallStatus	MPC/GPSIRID/GPSIRID.c	/^short CallStatus() {$/;"	f
Call_Land	MPC/GPSIRID/GPSIRID.c	/^bool Call_Land(void) {$/;"	f
ChangeWISPR	MPC/WISPR/WISPR.c	/^void ChangeWISPR(short wnum) {$/;"	f
CheckSignal	MPC/GPSIRID/GPSIRID.c	/^bool CheckSignal() {$/;"	f
CheckTime	LARA/LARA.c	/^bool CheckTime(ulong prevTime, short mode, short hour) {$/;"	f
Check_If_Cmds_Done_Or_Resent	MPC/GPSIRID/GPSIRID.c	/^short Check_If_Cmds_Done_Or_Resent(ulong *val0, ulong *val1) {$/;"	f
Check_Timers	MPC/MPC_Global/MPC.c	/^float Check_Timers(ushort PLI) {$/;"	f
Check_Vitals	MPC/MPC_Global/MPC.c	/^short Check_Vitals() {$/;"	f
CompareCoordinates	MPC/GPSIRID/GPSIRID.c	/^bool CompareCoordinates(char *LAT, char *LONG) {$/;"	f
Connect_SendFile_RecCmd	MPC/GPSIRID/GPSIRID.c	/^short Connect_SendFile_RecCmd(const char *filename) {$/;"	f
Console	LARA/LARA.c	/^void Console(char in) {$/;"	f
ConsoleIrid	MPC/GPSIRID/GPSIRID.c	/^void ConsoleIrid() {$/;"	f
Convert_BitMap_To_CharBuf	MPC/GPSIRID/GPSIRID.c	/^void Convert_BitMap_To_CharBuf(ulong val0, ulong val1, char *bin_str) {$/;"	f
CurrentWarning	LARA/LARA.c	/^bool CurrentWarning() {$/;"	f
CustomSYPCR	LARA/LARA.c	/^short CustomSYPCR = WDT105s | HaltMonEnable | BusMonEnable | BMT32;$/;"	v
DATA	LARA/PLATFORM.h	/^  bool DATA;     \/\/ Data is triggered true when the timing interval goes off.$/;"	m	struct:__anon1
DATAXINT	MPC/MPC_Global/MPC_Global.h	/^  short DATAXINT; \/\/ VEE:DATAXINTERVAL_NAME$/;"	m	struct:__anon9
DATAXINTERVAL_DEFAULT	MPC/MPC_SETTINGS/Settings.h	70;"	d
DATAXINTERVAL_DESC	MPC/MPC_SETTINGS/Settings.h	71;"	d
DATAXINTERVAL_NAME	MPC/MPC_SETTINGS/Settings.h	69;"	d
DBG	LARA/PLATFORM.h	136;"	d
DBG	LARA/PLATFORM.h	138;"	d
DBG1	LARA/PLATFORM.h	142;"	d
DBG1	LARA/PLATFORM.h	144;"	d
DBG2	LARA/PLATFORM.h	148;"	d
DBG2	LARA/PLATFORM.h	150;"	d
DEBUG	LARA/PLATFORM.h	83;"	d
DEBUG1	LARA/PLATFORM.h	84;"	d
DELAY	MPC/WINCH/Winch.h	/^  short DELAY; \/\/ Time in seconds post TUTxAcousticModem when the Winch actually$/;"	m	struct:__anon6
DEPTH	LARA/PLATFORM.h	/^  float DEPTH;     \/\/ Most recent depth measurement from CTD$/;"	m	struct:__anon1
DESCENTCALLS	MPC/WINCH/Winch.h	/^  short DESCENTCALLS;$/;"	m	struct:__anon7
DESCENTRCV	MPC/WINCH/Winch.h	/^  short DESCENTRCV;$/;"	m	struct:__anon7
DESCENTTIME	LARA/PLATFORM.h	/^  short DESCENTTIME;$/;"	m	struct:__anon1
DETECTIONINT_DEFAULT	MPC/MPC_SETTINGS/Settings.h	56;"	d
DETECTIONINT_DESC	MPC/MPC_SETTINGS/Settings.h	57;"	d
DETECTIONINT_NAME	MPC/MPC_SETTINGS/Settings.h	55;"	d
DETECTIONMAX_DEFAULT	MPC/MPC_SETTINGS/Settings.h	148;"	d
DETECTIONMAX_DESC	MPC/MPC_SETTINGS/Settings.h	149;"	d
DETECTIONMAX_NAME	MPC/MPC_SETTINGS/Settings.h	147;"	d
DETECTIONNUM_DEFAULT	MPC/MPC_SETTINGS/Settings.h	143;"	d
DETECTIONNUM_DESC	MPC/MPC_SETTINGS/Settings.h	144;"	d
DETECTIONNUM_NAME	MPC/MPC_SETTINGS/Settings.h	142;"	d
DETINT	MPC/MPC_Global/MPC_Global.h	/^  short DETINT;   \/\/-D      \/\/Minutes   \/\/WISPR DET INTERVAL$/;"	m	struct:__anon9
DETMAX	MPC/WISPR/WISPR.h	/^  short DETMAX; \/\/ Maximum Number of Detections to return$/;"	m	struct:__anon5
DETNUM	MPC/WISPR/WISPR.h	/^  short DETNUM; \/\/ Number of detections per one call to initiate #REALTIME call$/;"	m	struct:__anon5
DEVA	LARA/PLATFORM.h	42;"	d
DEVB	LARA/PLATFORM.h	43;"	d
DEVICECOM	LARA/PLATFORM.h	24;"	d
DEVICERX	LARA/PLATFORM.h	31;"	d
DEVICETX	LARA/PLATFORM.h	30;"	d
DEVX	LARA/PLATFORM.h	41;"	d
DIFARPWR	LARA/PLATFORM.h	27;"	d
DIVENUM	MPC/MPC_Global/MPC_Global.h	/^  short DIVENUM;  \/\/ For use instead of FileNumber: Might just use FILENUM.$/;"	m	struct:__anon10
DIVENUM_DEFAULT	MPC/MPC_SETTINGS/Settings.h	175;"	d
DIVENUM_DESC	MPC/MPC_SETTINGS/Settings.h	176;"	d
DIVENUM_NAME	MPC/MPC_SETTINGS/Settings.h	174;"	d
DOS_Com	MPC/MPC_Global/MPC.c	/^void DOS_Com(char *command, long filenum, char *ext, char *extt) {$/;"	f
DUTYCYCL	MPC/WISPR/WISPR.h	/^  short DUTYCYCL; \/\/ Duty cycle of recorder during one detection interval$/;"	m	struct:__anon5
DUTYCYCLE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	164;"	d
DUTYCYCLE_DESC	MPC/MPC_SETTINGS/Settings.h	165;"	d
DUTYCYCLE_NAME	MPC/MPC_SETTINGS/Settings.h	163;"	d
DataInterval	MPC/MPC_Global/MPC.c	/^int DataInterval;$/;"	v
DelayTX	MPC/GPSIRID/GPSIRID.c	/^void DelayTX(int ch) { RTCDelayMicroSeconds((long) ch * 3333L); }$/;"	f
Delay_AD_Log	MPC/MPC_Global/MPC.c	/^void Delay_AD_Log(short Sec) {$/;"	f
Delayms	MPC/MPC_Global/MPC_Global.h	5;"	d
DetectionInt	MPC/MPC_Global/MPC.c	/^int DetectionInt;$/;"	v
DevSelect	MPC/GPSIRID/GPSIRID.c	/^int DevSelect(int dev) {$/;"	f
DisplayParameters	MPC/MPC_SETTINGS/Settings.c	/^void DisplayParameters(FILE *stream) {$/;"	f
DutyCycleTicks	MPC/MPC_Global/MPC.c	/^int DutyCycleTicks;$/;"	v
ExtFinishPulseRuptHandler	LARA/LARA.c	/^IEV_C_PROTO(ExtFinishPulseRuptHandler);$/;"	v
FCHAN	MPC/ADS/ADS.h	5;"	d
FILENUM	MPC/MPC_Global/MPC_Global.h	/^  long FILENUM; \/\/ current number for 00000000.dat$/;"	m	struct:__anon9
FILENUM_DEFAULT	MPC/MPC_SETTINGS/Settings.h	62;"	d
FILENUM_DESC	MPC/MPC_SETTINGS/Settings.h	63;"	d
FILENUM_NAME	MPC/MPC_SETTINGS/Settings.h	61;"	d
FRATE	MPC/WINCH/Winch.h	/^  short FRATE;  \/\/ Velocity in Meters\/minute of the fall (descent) rate$/;"	m	struct:__anon6
FetchSettings	MPC/MPC_SETTINGS/Settings.c	/^void FetchSettings(Settings *VEESettings) {$/;"	f
Free_Disk_Space	MPC/MPC_Global/MPC.c	/^long Free_Disk_Space() {$/;"	f
GAIN	MPC/WISPR/WISPR.h	/^  short GAIN; \/\/-g 0-3$/;"	m	struct:__anon5
GPSIRID_Init	MPC/GPSIRID/GPSIRID.c	/^int GPSIRID_Init() {$/;"	f
GPS_TRIES	MPC/GPSIRID/GPSIRID.c	58;"	d	file:
GPSstartup	MPC/GPSIRID/GPSIRID.c	/^bool GPSstartup() {$/;"	f
GatherWISPRFreeSpace	MPC/WISPR/WISPR.c	/^void GatherWISPRFreeSpace() {$/;"	f
GetFileName	MPC/MPC_Global/MPC.c	/^char *GetFileName(bool Lowest, bool incIndex, long *fcounter,$/;"	f
GetGPSInput	MPC/GPSIRID/GPSIRID.c	/^char *GetGPSInput(char *chars, int *numsats) {$/;"	f
GetGPS_SyncRTC	MPC/GPSIRID/GPSIRID.c	/^bool GetGPS_SyncRTC() {$/;"	f
GetIRIDIUMSettings	MPC/GPSIRID/GPSIRID.c	/^void GetIRIDIUMSettings() {$/;"	f
GetIRIDInput	MPC/GPSIRID/GPSIRID.c	/^short GetIRIDInput(char *Template, short num_char_to_reads, uchar *compstring,$/;"	f
GetPowerSettings	MPC/ADS/ADS.c	/^void GetPowerSettings() {$/;"	f
GetSettings	MPC/MPC_Global/MPC.c	/^void GetSettings(void) {$/;"	f
GetStringWait	MPC/GPSIRID/GPSIRID.c	/^long GetStringWait(char *str, short wait) {$/;"	f
GetUTCSeconds	MPC/GPSIRID/GPSIRID.c	/^bool GetUTCSeconds() {$/;"	f
GetWISPRFreeSpace	MPC/WISPR/WISPR.c	/^float GetWISPRFreeSpace() {$/;"	f
GetWISPRInput	MPC/WISPR/WISPR.c	/^char *GetWISPRInput(float *numchars) {$/;"	f
GetWISPRSettings	MPC/WISPR/WISPR.c	/^void GetWISPRSettings() {$/;"	f
GetWinchSettings	MPC/WINCH/Winch.c	/^void GetWinchSettings() {$/;"	f
Get_ADCounter	MPC/ADS/ADS.c	/^int Get_ADCounter() { return ADCounter; }$/;"	f
Get_Voltage	MPC/ADS/ADS.c	/^float Get_Voltage() { return Voltage; } \/\/____ Get_Voltage ____\/\/$/;"	f
GlobalRestart	LARA/LARA.c	/^bool GlobalRestart;$/;"	v
HANDSHAKE	MPC/GPSIRID/GPSIRID.c	53;"	d	file:
HangUp	MPC/GPSIRID/GPSIRID.c	/^bool HangUp(void) {$/;"	f
IEV_C_FUNCT	LARA/LARA.c	/^IEV_C_FUNCT(ExtFinishPulseRuptHandler) {$/;"	f
IEV_C_FUNCT	MPC/ADS/ADS.c	/^IEV_C_FUNCT($/;"	f
IEV_C_FUNCT	MPC/ADS/ADS.c	/^IEV_C_FUNCT(ADTimingRuptHandler) \/\/ implied (IEVStack *ievstack:__a0) parameter$/;"	f
INITIAL_BATTERY_CAPACITY	LARA/PLATFORM.h	178;"	d
IRID	MPC/GPSIRID/GPSIRID.c	/^IridiumParameters IRID;$/;"	v
IRIDBAUD	LARA/PLATFORM.h	37;"	d
IRIDFileHandle	MPC/GPSIRID/GPSIRID.c	/^static int IRIDFileHandle;$/;"	v	file:
IRIDFilename	MPC/GPSIRID/GPSIRID.c	/^static char IRIDFilename[sizeof "c:00000000.dat"];$/;"	v	file:
IRIDGPS	MPC/GPSIRID/GPSIRID.c	/^short IRIDGPS() {$/;"	f
IRIDIUM	LARA/PLATFORM.h	88;"	d
IRIDPHONE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	95;"	d
IRIDPHONE_DESC	MPC/MPC_SETTINGS/Settings.h	96;"	d
IRIDPHONE_NAME	MPC/MPC_SETTINGS/Settings.h	94;"	d
IRIDREST_DEFAULT	MPC/MPC_SETTINGS/Settings.h	117;"	d
IRIDREST_DESC	MPC/MPC_SETTINGS/Settings.h	118;"	d
IRIDREST_NAME	MPC/MPC_SETTINGS/Settings.h	116;"	d
IRIDSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings IRIDSettings[] = {ANTSW_NAME,$/;"	v
IRIDStatus	MPC/GPSIRID/GPSIRID.c	/^static short IRIDStatus;$/;"	v	file:
IRIDWarm	MPC/GPSIRID/GPSIRID.c	/^short IRIDWarm = 27;  \/\/ Irid Modem warm-up. 45 IS NORMAL, 1 FOR TESTING \/\/\/$/;"	v
IRQ2_ISR	LARA/LARA.c	/^static void IRQ2_ISR(void) {$/;"	f	file:
IRQ3_ISR	LARA/LARA.c	/^static void IRQ3_ISR(void) {$/;"	f	file:
IRQ4_ISR	LARA/LARA.c	/^static void IRQ4_ISR(void) {$/;"	f	file:
IRQ5_ISR	LARA/LARA.c	/^static void IRQ5_ISR(void) {$/;"	f	file:
IRQ5_ISR	MPC/MPC_SETTINGS/Settings.c	/^static void IRQ5_ISR(void) {$/;"	f	file:
Incoming_Data	LARA/LARA.c	/^int Incoming_Data() {$/;"	f
InitializeLARA	LARA/LARA.c	/^void InitializeLARA(ulong *PwrOn) {$/;"	f
IridiumCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable IridiumCmdTable[] =$/;"	v
IridiumParameters	MPC/GPSIRID/GPSIRID.h	/^} IridiumParameters;$/;"	t	typeref:struct:__anon4
LARA	LARA/LARA.c	/^SystemStatus LARA;$/;"	v
LARA_Recovery	LARA/LARA.c	/^void LARA_Recovery() {} \/\/____ LARA_Recovery() ____\/\/$/;"	f
LAT	MPC/MPC_Global/MPC_Global.h	/^  char LAT[17];      \/\/ 45:67.8900 North$/;"	m	struct:__anon9
LATITUDE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	37;"	d
LATITUDE_DESC	MPC/MPC_SETTINGS/Settings.h	38;"	d
LATITUDE_NAME	MPC/MPC_SETTINGS/Settings.h	36;"	d
LOGFILE	MPC/MPC_Global/MPC_Global.h	/^  char LOGFILE[13]; \/\/ File Name: activity.log$/;"	m	struct:__anon9
LOGFILE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	66;"	d
LOGFILE_DESC	MPC/MPC_SETTINGS/Settings.h	67;"	d
LOGFILE_NAME	MPC/MPC_SETTINGS/Settings.h	65;"	d
LONG	MPC/MPC_Global/MPC_Global.h	/^  char LONG[17];     \/\/ 123:45.67 West$/;"	m	struct:__anon9
LONGITUDE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	31;"	d
LONGITUDE_DESC	MPC/MPC_SETTINGS/Settings.h	32;"	d
LONGITUDE_NAME	MPC/MPC_SETTINGS/Settings.h	30;"	d
LOWFIRST	MPC/GPSIRID/GPSIRID.h	/^  bool LOWFIRST;  \/\/ send file with lowest value first$/;"	m	struct:__anon4
LOWFIRST_DEFAULT	MPC/MPC_SETTINGS/Settings.h	138;"	d
LOWFIRST_DESC	MPC/MPC_SETTINGS/Settings.h	139;"	d
LOWFIRST_NAME	MPC/MPC_SETTINGS/Settings.h	137;"	d
LOWPOWER	LARA/PLATFORM.h	/^  bool LOWPOWER;$/;"	m	struct:__anon1
LostConnect	MPC/GPSIRID/GPSIRID.c	/^bool LostConnect = false;$/;"	v
MAXCALLS	MPC/GPSIRID/GPSIRID.h	/^  short MAXCALLS; \/\/ Maximum Iridium calls per session$/;"	m	struct:__anon4
MAXCALLS_DEFAULT	MPC/MPC_SETTINGS/Settings.h	126;"	d
MAXCALLS_DESC	MPC/MPC_SETTINGS/Settings.h	127;"	d
MAXCALLS_NAME	MPC/MPC_SETTINGS/Settings.h	125;"	d
MAXUPL	MPC/GPSIRID/GPSIRID.h	/^  short MAXUPL;   \/\/ Max upload try per call$/;"	m	struct:__anon4
MAXUPLOAD_DEFAULT	MPC/MPC_SETTINGS/Settings.h	108;"	d
MAXUPLOAD_DESC	MPC/MPC_SETTINGS/Settings.h	109;"	d
MAXUPLOAD_NAME	MPC/MPC_SETTINGS/Settings.h	107;"	d
MAX_BLOCK_SIZE	LARA/PLATFORM.h	104;"	d
MAX_DATAX_INTERVAL	LARA/PLATFORM.h	106;"	d
MAX_DETECTIONS	LARA/PLATFORM.h	112;"	d
MAX_DETECTION_INTERVAL	LARA/PLATFORM.h	103;"	d
MAX_DUTYCYCLE	LARA/PLATFORM.h	114;"	d
MAX_GPS_CHANGE	LARA/PLATFORM.h	99;"	d
MAX_RESENT	MPC/GPSIRID/GPSIRID.c	57;"	d	file:
MAX_STARTUPS	LARA/PLATFORM.h	101;"	d
MAX_UPLOAD	LARA/PLATFORM.h	100;"	d
MINIMUM_BATTERY_CAPACITY	LARA/PLATFORM.h	179;"	d
MINSIGQ	MPC/GPSIRID/GPSIRID.h	/^  short MINSIGQ;  \/\/ Min Irid signal quality to proceed$/;"	m	struct:__anon4
MINSIGQ_DEFAULT	MPC/MPC_SETTINGS/Settings.h	100;"	d
MINSIGQ_DESC	MPC/MPC_SETTINGS/Settings.h	101;"	d
MINSIGQ_NAME	MPC/MPC_SETTINGS/Settings.h	99;"	d
MINSYSVOLT_DEFAULT	MPC/MPC_SETTINGS/Settings.h	89;"	d
MINSYSVOLT_DESC	MPC/MPC_SETTINGS/Settings.h	90;"	d
MINSYSVOLT_NAME	MPC/MPC_SETTINGS/Settings.h	88;"	d
MINVOLT	MPC/ADS/ADS.h	/^  char MINVOLT[6]; \/\/-v %.2f  minimum system voltage$/;"	m	struct:__anon2
MIN_BATTERY_VOLTAGE	LARA/PLATFORM.h	176;"	d
MIN_DATAX_INTERVAL	LARA/PLATFORM.h	105;"	d
MIN_DETECTION_INTERVAL	LARA/PLATFORM.h	102;"	d
MIN_DUTYCYCLE	LARA/PLATFORM.h	113;"	d
MIN_FREESPACE	LARA/PLATFORM.h	115;"	d
MIN_OFF_DEPTH	LARA/PLATFORM.h	119;"	d
MIN_ON_DEPTH	LARA/PLATFORM.h	120;"	d
MOORDEPTH	LARA/PLATFORM.h	/^  float MOORDEPTH; \/\/ Depth confirmation at beginning of LARA.PHASE==1. Averaged$/;"	m	struct:__anon1
MPC	LARA/LARA.c	/^SystemParameters MPC;$/;"	v
Make_Directory	MPC/MPC_Global/MPC.c	/^void Make_Directory(char *path) {$/;"	f
Max_No_SigQ_Chk	MPC/GPSIRID/GPSIRID.c	/^short Max_No_SigQ_Chk = 7;$/;"	v
MinSQ	MPC/GPSIRID/GPSIRID.c	/^short MinSQ;$/;"	v
ModifyPermission	MPC/MPC_SETTINGS/Settings.c	/^bool ModifyPermission = true; \/\/ gets updated when password entered$/;"	v
NCHAN	MPC/ADS/ADS.h	6;"	d
NIGK	MPC/WINCH/Winch.c	/^WINCHParameters NIGK;$/;"	v
NIGKANTENNALENGTH_DEFAULT	MPC/MPC_SETTINGS/Settings.h	216;"	d
NIGKANTENNALENGTH_DESC	MPC/MPC_SETTINGS/Settings.h	217;"	d
NIGKANTENNALENGTH_NAME	MPC/MPC_SETTINGS/Settings.h	215;"	d
NIGKDELAY_DEFAULT	MPC/MPC_SETTINGS/Settings.h	210;"	d
NIGKDELAY_DESC	MPC/MPC_SETTINGS/Settings.h	211;"	d
NIGKDELAY_NAME	MPC/MPC_SETTINGS/Settings.h	209;"	d
NIGKFALLRATE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	231;"	d
NIGKFALLRATE_DESC	MPC/MPC_SETTINGS/Settings.h	232;"	d
NIGKFALLRATE_NAME	MPC/MPC_SETTINGS/Settings.h	230;"	d
NIGKPROFILES_DEFAULT	MPC/MPC_SETTINGS/Settings.h	236;"	d
NIGKPROFILES_DESC	MPC/MPC_SETTINGS/Settings.h	237;"	d
NIGKPROFILES_NAME	MPC/MPC_SETTINGS/Settings.h	235;"	d
NIGKPort	MPC/WINCH/Winch.c	/^TUPort *NIGKPort;$/;"	v
NIGKRECOVERY_DEFAULT	MPC/MPC_SETTINGS/Settings.h	240;"	d
NIGKRECOVERY_DESC	MPC/MPC_SETTINGS/Settings.h	241;"	d
NIGKRECOVERY_NAME	MPC/MPC_SETTINGS/Settings.h	239;"	d
NIGKRISERATE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	226;"	d
NIGKRISERATE_DESC	MPC/MPC_SETTINGS/Settings.h	227;"	d
NIGKRISERATE_NAME	MPC/MPC_SETTINGS/Settings.h	225;"	d
NIGKSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings NIGKSettings[] = {NIGKDELAY_NAME,$/;"	v
NIGKTARGETDEPTH_DEFAULT	MPC/MPC_SETTINGS/Settings.h	221;"	d
NIGKTARGETDEPTH_DESC	MPC/MPC_SETTINGS/Settings.h	222;"	d
NIGKTARGETDEPTH_NAME	MPC/MPC_SETTINGS/Settings.h	220;"	d
NIGKWINCH	LARA/PLATFORM.h	96;"	d
NIGK_MIN_DEPTH	MPC/WINCH/Winch.h	19;"	d
NUM	MPC/WISPR/WISPR.h	/^  short NUM;    \/\/ Depends on the number of WISPR Boards installed$/;"	m	struct:__anon5
NUMCOM	MPC/GPSIRID/GPSIRID.c	56;"	d	file:
NextCharacter	MPC/WINCH/Winch.c	/^char NextCharacter;$/;"	v
Nsamps	MPC/ADS/ADS.c	/^long Nsamps;  \/\/ Incremented upon each sample. Once Nsamps equals SAMPLES$/;"	v
Num_Resent	MPC/GPSIRID/GPSIRID.c	/^short Num_Resent;$/;"	v
OFFDEPTH	MPC/MPC_Global/MPC_Global.h	/^  short OFFDEPTH; \/\/ Depth at which SG power off during ascent.$/;"	m	struct:__anon10
OFFSET	MPC/GPSIRID/GPSIRID.h	/^  short OFFSET;   \/\/ GPS and UTC time offset in sec$/;"	m	struct:__anon4
OFFSET_DEFAULT	MPC/MPC_SETTINGS/Settings.h	122;"	d
OFFSET_DESC	MPC/MPC_SETTINGS/Settings.h	123;"	d
OFFSET_NAME	MPC/MPC_SETTINGS/Settings.h	121;"	d
ON	LARA/PLATFORM.h	/^  bool ON;       \/\/ While "ON", continue running program$/;"	m	struct:__anon1
ONDEPTH	MPC/MPC_Global/MPC_Global.h	/^  short ONDEPTH;  \/\/ Depth at which SG powers on during the descent.$/;"	m	struct:__anon10
OpenSatCom	MPC/GPSIRID/GPSIRID.c	/^void OpenSatCom(bool onoff) {$/;"	f
OpenTUPort_NIGK	MPC/WINCH/Winch.c	/^void OpenTUPort_NIGK(bool on) {$/;"	f
OpenTUPort_WISPR	MPC/WISPR/WISPR.c	/^void OpenTUPort_WISPR(bool on) {$/;"	f
Open_Avg_File	MPC/ADS/ADS.c	/^void Open_Avg_File(long counter) {$/;"	f
PAMPort	MPC/WISPR/WISPR.c	/^TUPort *PAMPort;$/;"	v
PAM_RX	MPC/WISPR/WISPR.c	/^short PAM_RX, PAM_TX;$/;"	v
PAM_TX	MPC/WISPR/WISPR.c	/^short PAM_RX, PAM_TX;$/;"	v
PAYOUT	LARA/PLATFORM.h	/^  float PAYOUT;$/;"	m	struct:__anon1
PD_CMD_BUILD_LINKS	MPC/MPC_SETTINGS/Settings.c	15;"	d	file:
PHASE	LARA/PLATFORM.h	/^  short PHASE; \/\/ 1=AUH, 2=Ascent Profile, 3=Surface Communitcation, 4= Descent$/;"	m	struct:__anon1
PHONE	MPC/GPSIRID/GPSIRID.h	/^  char PHONE[14]; \/\/ Rudics phone number 13 char long$/;"	m	struct:__anon4
PITPERIOD	MPC/ADS/ADS.h	8;"	d
PITRATE	MPC/ADS/ADS.h	7;"	d
PLATFORM	LARA/PLATFORM.h	3;"	d
PLTFRMID	MPC/MPC_Global/MPC_Global.h	/^  char PLTFRMID[6];  \/\/ rudicsland$/;"	m	struct:__anon9
PLTFRMID_DEFAULT	MPC/MPC_SETTINGS/Settings.h	27;"	d
PLTFRMID_DESC	MPC/MPC_SETTINGS/Settings.h	28;"	d
PLTFRMID_NAME	MPC/MPC_SETTINGS/Settings.h	26;"	d
POWERERROR	LARA/PLATFORM.h	175;"	d
POWERLOGGING	LARA/PLATFORM.h	81;"	d
POWEROFFDEPTH_DEFAULT	MPC/MPC_SETTINGS/Settings.h	184;"	d
POWEROFFDEPTH_DESC	MPC/MPC_SETTINGS/Settings.h	185;"	d
POWEROFFDEPTH_NAME	MPC/MPC_SETTINGS/Settings.h	183;"	d
POWERONDEPTH_DEFAULT	MPC/MPC_SETTINGS/Settings.h	179;"	d
POWERONDEPTH_DESC	MPC/MPC_SETTINGS/Settings.h	180;"	d
POWERONDEPTH_NAME	MPC/MPC_SETTINGS/Settings.h	178;"	d
PROFILES	MPC/WINCH/Winch.h	/^  short PROFILES; \/\/ Keep record of number of profiles$/;"	m	struct:__anon6
PROGNAME	MPC/MPC_Global/MPC_Global.h	/^  char PROGNAME[20]; \/\/ added HM$/;"	m	struct:__anon9
PROG_DEFAULT	MPC/MPC_SETTINGS/Settings.h	19;"	d
PROG_DESC	MPC/MPC_SETTINGS/Settings.h	20;"	d
PROG_NAME	MPC/MPC_SETTINGS/Settings.h	18;"	d
PROG_VERSION	LARA/PLATFORM.h	79;"	d
PROJID	MPC/MPC_Global/MPC_Global.h	/^  char PROJID[6];    \/\/ rudicsland$/;"	m	struct:__anon9
PROJID_DEFAULT	MPC/MPC_SETTINGS/Settings.h	23;"	d
PROJID_DESC	MPC/MPC_SETTINGS/Settings.h	24;"	d
PROJID_NAME	MPC/MPC_SETTINGS/Settings.h	22;"	d
PWR	LARA/PLATFORM.h	181;"	d
PWR	LARA/PLATFORM.h	195;"	d
PWRCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable PWRCmdTable[] =$/;"	v
ParseStartupParams	MPC/MPC_Global/MPC.c	/^void ParseStartupParams(bool DefaultSettings) {$/;"	f
PhaseFour	LARA/LARA.c	/^void PhaseFour() {$/;"	f
PhaseOne	LARA/LARA.c	/^void PhaseOne() {$/;"	f
PhaseThree	LARA/LARA.c	/^void PhaseThree() {$/;"	f
PhaseTwo	LARA/LARA.c	/^void PhaseTwo() {$/;"	f
PhoneNum	MPC/GPSIRID/GPSIRID.c	/^static char PhoneNum[14];$/;"	v	file:
PhonePin	MPC/GPSIRID/GPSIRID.c	/^short PhonePin(void) {$/;"	f
PhoneStatus	MPC/GPSIRID/GPSIRID.c	/^int PhoneStatus() {$/;"	f
PltfrmID	MPC/GPSIRID/GPSIRID.c	/^static char PltfrmID[5];$/;"	v	file:
PowerParameters	MPC/ADS/ADS.h	/^} PowerParameters;/;"	t	typeref:struct:__anon2
PowerSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings PowerSettings[] = {BATTERYLOGGER_NAME,$/;"	v
Power_Monitor	MPC/ADS/ADS.c	/^float Power_Monitor(ulong totaltime, int filehandle, ulong *LoggingTime) {$/;"	f
PreRun	MPC/MPC_Global/MPC.c	/^void PreRun(void) {$/;"	f
PrintSystemStatus	LARA/LARA.c	/^char *PrintSystemStatus() {$/;"	f
ProjID	MPC/GPSIRID/GPSIRID.c	/^static char ProjID[5];$/;"	v	file:
PutInSleepMode	LARA/LARA.c	/^bool PutInSleepMode = false;$/;"	v
REALTIME	LARA/PLATFORM.h	95;"	d
RECOVERY	MPC/WINCH/Winch.h	/^  short RECOVERY; \/\/ If 1, call in repeatedly @ specified interval. 'A' reset to$/;"	m	struct:__anon6
REST	MPC/GPSIRID/GPSIRID.h	/^  short REST;     \/\/ Rest period for Iridium to call again$/;"	m	struct:__anon4
RRATE	MPC/WINCH/Winch.h	/^  short RRATE;  \/\/ Velocity in meters\/minute of the rise (ascent) rate$/;"	m	struct:__anon6
RTS	LARA/PLATFORM.h	128;"	d
RTS	LARA/PLATFORM.h	130;"	d
RUDICSBLOCK	MPC/GPSIRID/GPSIRID.c	60;"	d	file:
RecallTimeout	MPC/GPSIRID/GPSIRID.c	55;"	d	file:
Receive_Command	MPC/GPSIRID/GPSIRID.c	/^int Receive_Command(int len) {$/;"	f
ResetDefaultSettings	MPC/MPC_SETTINGS/Settings.c	/^void ResetDefaultSettings(Settings *VEESettings) {$/;"	f
Reset_ADCounter	MPC/ADS/ADS.c	/^void Reset_ADCounter() { ADCounter = 0; }$/;"	f
Return_ADSTIME	MPC/ADS/ADS.c	/^ushort Return_ADSTIME() { return ADSTIME; }$/;"	f
RudicsConnect	MPC/GPSIRID/GPSIRID.c	/^bool RudicsConnect(int status) {$/;"	f
SAMPLES	MPC/ADS/ADS.c	/^ushort SAMPLES;$/;"	v
SBE19	MPC/CTD/CTD.h	1;"	d
SEAGSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings SEAGSettings[] = {POWERONDEPTH_NAME,$/;"	v
STARTMAX	MPC/MPC_Global/MPC_Global.h	/^  short STARTMAX; \/\/-s$/;"	m	struct:__anon9
STARTMAX_DEFAULT	MPC/MPC_SETTINGS/Settings.h	52;"	d
STARTMAX_DESC	MPC/MPC_SETTINGS/Settings.h	53;"	d
STARTMAX_NAME	MPC/MPC_SETTINGS/Settings.h	50;"	d
STARTPHASE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	47;"	d
STARTPHASE_DESC	MPC/MPC_SETTINGS/Settings.h	48;"	d
STARTPHASE_NAME	MPC/MPC_SETTINGS/Settings.h	46;"	d
STARTUPS	MPC/MPC_Global/MPC_Global.h	/^  short STARTUPS;$/;"	m	struct:__anon9
STARTUPS_DEFAULT	MPC/MPC_SETTINGS/Settings.h	43;"	d
STARTUPS_DESC	MPC/MPC_SETTINGS/Settings.h	44;"	d
STARTUPS_NAME	MPC/MPC_SETTINGS/Settings.h	42;"	d
STATUS	LARA/PLATFORM.h	/^  short STATUS;$/;"	m	struct:__anon1
STOPCALLS	MPC/WINCH/Winch.h	/^  short STOPCALLS;$/;"	m	struct:__anon7
STOPRCV	MPC/WINCH/Winch.h	/^  short STOPRCV;$/;"	m	struct:__anon7
STRING_SIZE	LARA/LARA.c	96;"	d	file:
STRING_SIZE	MPC/CTD/CTD.c	39;"	d	file:
STRING_SIZE	MPC/GPSIRID/GPSIRID.c	59;"	d	file:
SURFACED	LARA/PLATFORM.h	/^  bool SURFACED; \/\/ Set to true when Antenna is estimated to be protruding from$/;"	m	struct:__anon1
SYSCLK	LARA/PLATFORM.h	109;"	d
SYSSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings SYSSettings[] = {PROG_NAME,$/;"	v
SYSTEMDIAGNOSTICS	LARA/PLATFORM.h	86;"	d
SamplePWR	MPC/MPC_SETTINGS/Settings.c	/^void SamplePWR() { printf("\\nVoltage: %5.2f", Voltage_Now()); }$/;"	f
SatComOpen	MPC/GPSIRID/GPSIRID.c	/^bool SatComOpen = false;$/;"	v
SaveParams	MPC/MPC_Global/MPC.c	/^bool SaveParams(const char *Command) {$/;"	f
Sea_Ice_Algorithm	MPC/CTD/CTD.c	/^int Sea_Ice_Algorithm() {$/;"	f
SeagliderParameters	MPC/MPC_Global/MPC_Global.h	/^} SeagliderParameters;$/;"	t	typeref:struct:__anon10
SendProjHdr	MPC/GPSIRID/GPSIRID.c	/^bool SendProjHdr() {$/;"	f
SendString	MPC/GPSIRID/GPSIRID.c	/^void SendString(const char *StringIn) {$/;"	f
SendWISPRGPS	MPC/WISPR/WISPR.c	/^bool SendWISPRGPS = false;$/;"	v
Send_Blocks	MPC/GPSIRID/GPSIRID.c	/^int Send_Blocks(char *bitmap, uchar NumOfBlks, ushort BlockLength,$/;"	f
Send_File	MPC/GPSIRID/GPSIRID.c	/^short Send_File(bool FileExist, long filelength) {$/;"	f
Settings	MPC/MPC_SETTINGS/Settings.h	/^} Settings;$/;"	t	typeref:struct:__anon8
SettingsPointer	MPC/MPC_SETTINGS/Settings.c	/^Settings *SettingsPointer;$/;"	v
SetupAModemCmd	MPC/MPC_SETTINGS/Settings.c	/^void SetupAModemCmd() {$/;"	f
SetupCTDCmd	MPC/MPC_SETTINGS/Settings.c	/^void SetupCTDCmd() {$/;"	f
SetupCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable SetupCmdTable[] =$/;"	v
SetupDefaultsCmd	MPC/MPC_SETTINGS/Settings.c	/^char *SetupDefaultsCmd(CmdInfoPtr cip) {$/;"	f
SetupHardware	MPC/MPC_Global/MPC.c	/^void SetupHardware(void) {$/;"	f
SetupHelpCmd	MPC/MPC_SETTINGS/Settings.c	/^char *SetupHelpCmd(CmdInfoPtr cip) {$/;"	f
SetupIridiumCmd	MPC/MPC_SETTINGS/Settings.c	/^void SetupIridiumCmd() {$/;"	f
SetupListCmd	MPC/MPC_SETTINGS/Settings.c	/^char *SetupListCmd(CmdInfoPtr cip) {$/;"	f
SetupPWRCmd	MPC/MPC_SETTINGS/Settings.c	/^void SetupPWRCmd() {$/;"	f
SetupSettings	MPC/MPC_SETTINGS/Settings.c	/^void SetupSettings() {$/;"	f
SetupWISPRCmd	MPC/MPC_SETTINGS/Settings.c	/^void SetupWISPRCmd() {$/;"	f
Setup_ADS	MPC/ADS/ADS.c	/^ushort Setup_ADS(bool ads_on, long filecounter, ushort val) {$/;"	f
Setup_Acquisition	MPC/ADS/ADS.c	/^void Setup_Acquisition(ushort BitShift) {$/;"	f
SignalQuality	MPC/GPSIRID/GPSIRID.c	/^short SignalQuality(short *signal_quality) {$/;"	f
Sleep	LARA/LARA.c	/^void Sleep(void) {$/;"	f
SleepUntilWoken	LARA/LARA.c	/^void SleepUntilWoken(void) {$/;"	f
StartCTDCmd	MPC/MPC_SETTINGS/Settings.c	/^void StartCTDCmd() { CTD_Start_Up(1, false); }$/;"	f
StartPWRCmd	MPC/MPC_SETTINGS/Settings.c	/^void StartPWRCmd() {$/;"	f
StatusCheck	MPC/GPSIRID/GPSIRID.c	/^void StatusCheck() {$/;"	f
StopCTDCmd	MPC/MPC_SETTINGS/Settings.c	/^void StopCTDCmd() { DevSelect(DEVX); }$/;"	f
StopPWRCmd	MPC/MPC_SETTINGS/Settings.c	/^void StopPWRCmd() {$/;"	f
StringSearch	MPC/GPSIRID/GPSIRID.c	/^short StringSearch(char *inString, char *Template, uchar *compstring) {$/;"	f
SummedVelocity	MPC/CTD/CTD.c	/^float SummedVelocity;$/;"	v
Surfaced	MPC/WINCH/Winch.c	/^bool Surfaced;$/;"	v
SyncMode	MPC/CTD/CTD.c	/^bool SyncMode;$/;"	v
SystemCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable SystemCmdTable[] =$/;"	v
SystemParameters	MPC/MPC_Global/MPC_Global.h	/^} SystemParameters;$/;"	t	typeref:struct:__anon9
SystemSettings	MPC/MPC_SETTINGS/Settings.c	/^void SystemSettings() {$/;"	f
SystemStatus	LARA/PLATFORM.h	/^} SystemStatus;$/;"	t	typeref:struct:__anon1
System_Timer	MPC/MPC_Global/MPC.c	/^int System_Timer() {$/;"	f
TDEPTH	LARA/PLATFORM.h	/^  short TDEPTH; \/\/$/;"	m	struct:__anon1
TDEPTH	MPC/WINCH/Winch.h	/^  short TDEPTH; \/\/ CTD depth at optimal position for iridium\/gps comms (Antenna$/;"	m	struct:__anon6
TOPDEPTH	LARA/PLATFORM.h	/^  float TOPDEPTH;$/;"	m	struct:__anon1
TX_Success	MPC/GPSIRID/GPSIRID.c	/^short TX_Success = 0;$/;"	v
Time	MPC/MPC_Global/MPC.c	/^char *Time(ulong *seconds) {$/;"	f
TimeDate	MPC/MPC_Global/MPC.c	/^char *TimeDate(ulong *seconds) {$/;"	f
TimeExpired	MPC/GPSIRID/GPSIRID.c	/^bool TimeExpired = false;$/;"	v
TimingDelayCount	MPC/GPSIRID/GPSIRID.c	/^ulong TimingDelayCount;$/;"	v
TotalDetections	MPC/WISPR/WISPR.c	/^int TotalDetections;$/;"	v
TotalPower	MPC/ADS/ADS.c	/^long TotalPower[2] = {0, 0};$/;"	v
UPLOAD	MPC/CTD/CTD.h	/^  short UPLOAD; \/\/ A boolean 1 or 0 to decide whether to upload CTD data at$/;"	m	struct:__anon3
UpdateWISPRFRS	MPC/WISPR/WISPR.c	/^void UpdateWISPRFRS() {$/;"	f
UploadFiles	MPC/GPSIRID/GPSIRID.c	/^short UploadFiles() {$/;"	f
VEEStoreShort	MPC/MPC_Global/MPC.c	/^void VEEStoreShort(char *veename, short value) {$/;"	f
VOLTAGE	MPC/ADS/ADS.c	/^long VOLTAGE; \/\/ Summation of channel 1 from QSPI sampling function$/;"	v
Voltage	MPC/ADS/ADS.c	/^float Voltage = 0.0;$/;"	v
Voltage_Now	MPC/ADS/ADS.c	/^float Voltage_Now() {$/;"	f
WARMUP	MPC/GPSIRID/GPSIRID.h	/^  short WARMUP; \/\/ IRID GPS Unit warm up in sec\/\/Does this really need to be in$/;"	m	struct:__anon4
WARMUP_DEFAULT	MPC/MPC_SETTINGS/Settings.h	104;"	d
WARMUP_DESC	MPC/MPC_SETTINGS/Settings.h	105;"	d
WARMUP_NAME	MPC/MPC_SETTINGS/Settings.h	103;"	d
WINCH	MPC/WINCH/Winch.c	/^WinchCalls WINCH;$/;"	v
WINCHCALLS	MPC/WINCH/Winch.h	/^  short WINCHCALLS;$/;"	m	struct:__anon7
WINCHParameters	MPC/WINCH/Winch.h	/^} WINCHParameters;$/;"	t	typeref:struct:__anon6
WISP	MPC/WISPR/WISPR.c	/^WISPRParameters WISP;$/;"	v
WISPR	LARA/PLATFORM.h	87;"	d
WISPRCmdTable	MPC/MPC_SETTINGS/Settings.c	/^CmdTable WISPRCmdTable[] =$/;"	v
WISPRDFP	MPC/WISPR/WISPR.c	/^void WISPRDFP() {$/;"	f
WISPRDet	MPC/WISPR/WISPR.c	/^void WISPRDet(int dtx) {$/;"	f
WISPRExit	MPC/WISPR/WISPR.c	/^bool WISPRExit() {$/;"	f
WISPRExpectedReturn	MPC/WISPR/WISPR.c	/^bool WISPRExpectedReturn(short expected, bool reboot) {$/;"	f
WISPRFOUR	LARA/PLATFORM.h	26;"	d
WISPRFreeSpace	MPC/WISPR/WISPR.c	/^float WISPRFreeSpace = 0.0;$/;"	v
WISPRGAIN_DEFAULT	MPC/MPC_SETTINGS/Settings.h	154;"	d
WISPRGAIN_DESC	MPC/MPC_SETTINGS/Settings.h	155;"	d
WISPRGAIN_NAME	MPC/MPC_SETTINGS/Settings.h	153;"	d
WISPRGPS	MPC/WISPR/WISPR.c	/^void WISPRGPS() {$/;"	f
WISPRGPSSends	MPC/WISPR/WISPR.c	/^static int WISPRGPSSends;$/;"	v	file:
WISPRGain	MPC/WISPR/WISPR.c	/^void WISPRGain(short c) {$/;"	f
WISPRMODE_DEFAULT	MPC/MPC_SETTINGS/Settings.h	170;"	d
WISPRMODE_DESC	MPC/MPC_SETTINGS/Settings.h	171;"	d
WISPRMODE_NAME	MPC/MPC_SETTINGS/Settings.h	169;"	d
WISPRNUMBER	LARA/PLATFORM.h	111;"	d
WISPRNUM_DEFAULT	MPC/MPC_SETTINGS/Settings.h	159;"	d
WISPRNUM_DESC	MPC/MPC_SETTINGS/Settings.h	160;"	d
WISPRNUM_NAME	MPC/MPC_SETTINGS/Settings.h	158;"	d
WISPRONE	LARA/PLATFORM.h	28;"	d
WISPROff	MPC/MPC_SETTINGS/Settings.c	/^void WISPROff() {$/;"	f
WISPROn	MPC/MPC_SETTINGS/Settings.c	/^void WISPROn() {$/;"	f
WISPRParameters	MPC/WISPR/WISPR.h	/^} WISPRParameters;$/;"	t	typeref:struct:__anon5
WISPRPower	MPC/WISPR/WISPR.c	/^void WISPRPower(bool power) {$/;"	f
WISPRSafeShutdown	MPC/WISPR/WISPR.c	/^void WISPRSafeShutdown() {$/;"	f
WISPRTFP	MPC/WISPR/WISPR.c	/^void WISPRTFP() {$/;"	f
WISPRTHREE	LARA/PLATFORM.h	25;"	d
WISPRTWO	LARA/PLATFORM.h	29;"	d
WISPRWriteFile	MPC/WISPR/WISPR.c	/^void WISPRWriteFile(int uploadfilehandle) {$/;"	f
WISPR_Data	MPC/WISPR/WISPR.c	/^short WISPR_Data() {$/;"	f
WISPR_On	MPC/WISPR/WISPR.c	/^bool WISPR_On;$/;"	v
WISPR_PWR_OFF	LARA/PLATFORM.h	35;"	d
WISPR_PWR_ON	LARA/PLATFORM.h	34;"	d
WISPR_Status	MPC/WISPR/WISPR.c	/^bool WISPR_Status() { return WISPR_On; }$/;"	f
WISPSettings	MPC/MPC_SETTINGS/Settings.c	/^Settings WISPSettings[] = {WISPRNUM_NAME,$/;"	v
WTMODE	LARA/PLATFORM.h	108;"	d
WaitForWinch	LARA/LARA.c	/^void WaitForWinch(short expectedBuoyMode) {$/;"	f
WinchCalls	MPC/WINCH/Winch.h	/^} WinchCalls;$/;"	t	typeref:struct:__anon7
WinchConsole	MPC/WINCH/Winch.c	/^void WinchConsole() {$/;"	f
Winch_Ascend	MPC/WINCH/Winch.c	/^ulong Winch_Ascend(void) {$/;"	f
Winch_Descend	MPC/WINCH/Winch.c	/^ulong Winch_Descend(void) {$/;"	f
Winch_Monitor	MPC/WINCH/Winch.c	/^void Winch_Monitor(int filehandle) {$/;"	f
Winch_Stop	MPC/WINCH/Winch.c	/^ulong Winch_Stop(void) {$/;"	f
WisprString	MPC/WISPR/WISPR.c	/^static char *WisprString;$/;"	v	file:
WriteBuffer	MPC/MPC_Global/MPC_Global.h	/^static char *WriteBuffer;$/;"	v
WriteFile	LARA/LARA.c	/^ulong WriteFile(ulong TotalSeconds) {$/;"	f
ad	MPC/ADS/ADS.c	/^CFxAD *ad, adbuf;$/;"	v
adbuf	MPC/ADS/ADS.c	/^CFxAD *ad, adbuf;$/;"	v
ascentRate	MPC/CTD/CTD.c	/^float ascentRate = 0.26;$/;"	v
command	MPC/MPC_Global/MPC_Global.h	/^  void (*command)();$/;"	m	struct:menu
create_dtx_file	MPC/WISPR/WISPR.c	/^void create_dtx_file(long fnum) {$/;"	f
data	MPC/ADS/ADS.c	/^bool data;$/;"	v
descentRate	MPC/CTD/CTD.c	/^float descentRate = 0.1923; \/\/ m\/s$/;"	v
deviceID	MPC/GPSIRID/GPSIRID.c	/^int deviceID=0; \/\/ 0=off, 1=buoy, 2=antenna$/;"	v
devicePort	MPC/GPSIRID/GPSIRID.c	/^TUPort *devicePort;$/;"	v
dtxrqst	MPC/WISPR/WISPR.c	/^int dtxrqst;$/;"	v
entries	MPC/MPC_Global/MPC_Global.h	/^  short entries;$/;"	m	struct:menu
first	MPC/GPSIRID/GPSIRID.c	/^uchar *inputstring, *first, *scratch;$/;"	v
inputstring	MPC/GPSIRID/GPSIRID.c	/^uchar *inputstring, *first, *scratch;$/;"	v
main	LARA/LARA.c	/^void main() {$/;"	f
maxcurrent	MPC/ADS/ADS.c	/^ushort maxcurrent = 0;$/;"	v
menu	MPC/MPC_Global/MPC_Global.h	/^struct menu {$/;"	s
minvoltage	MPC/ADS/ADS.c	/^ushort minvoltage = 0;$/;"	v
mirrorpins	LARA/LARA.c	/^uchar mirrorpins[] = {15, 16, 17, 18, 19, 26, 36, 0};$/;"	v
optCurrent	MPC/MPC_SETTINGS/Settings.h	/^  char *optCurrent; \/\/ current value$/;"	m	struct:__anon8
optDefault	MPC/MPC_SETTINGS/Settings.h	/^  char *optDefault; \/\/ default value$/;"	m	struct:__anon8
optDesc	MPC/MPC_SETTINGS/Settings.h	/^  char *optDesc;    \/\/ detailed description text$/;"	m	struct:__anon8
optName	MPC/MPC_SETTINGS/Settings.h	/^  char *optName;    \/\/ VEE name for lookup$/;"	m	struct:__anon8
print_clock_cycle_count	MPC/MPC_Global/MPC.c	/^void print_clock_cycle_count(clock_t start, clock_t stop, char *label) {$/;"	f
printsafe	MPC/MPC_Global/MPC.c	/^void printsafe (long l, uchar *b) {$/;"	f
returnstr	LARA/LARA.c	/^static char *returnstr;$/;"	v	file:
sbeID	MPC/CTD/CTD.c	/^int sbeID=DEVB;  \/\/ DEVA:antenna DEVB:buoy$/;"	v
scratch	MPC/GPSIRID/GPSIRID.c	/^uchar *inputstring, *first, *scratch;$/;"	v
settings	MPC/MPC_SETTINGS/Settings.c	/^void settings(void) {$/;"	f
shutdown	LARA/LARA.c	/^void shutdown() {$/;"	f
start_clock	MPC/MPC_Global/MPC.c	/^volatile clock_t start_clock;$/;"	v
stop_clock	MPC/MPC_Global/MPC.c	/^volatile clock_t stop_clock;$/;"	v
string	MPC/MPC_Global/MPC_Global.h	/^  char *string;$/;"	m	struct:menu
stringin	MPC/CTD/CTD.c	/^static char *stringin;$/;"	v	file:
stringout	MPC/CTD/CTD.c	/^static char *stringout;$/;"	v	file:
time_chr	MPC/MPC_Global/MPC.c	/^char time_chr[21];$/;"	v
uploadfile	LARA/LARA.c	/^static char uploadfile[] =$/;"	v	file:
wisprfile	MPC/WISPR/WISPR.c	/^static char wisprfile[] = "c:WISPRFRS.DAT";$/;"	v	file:
